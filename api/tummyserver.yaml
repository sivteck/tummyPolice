openapi: 3.0.0
info:
  title: Tummy Police
  description: Food Delivery App
  version: 1.0.0
servers:
  - url: 'http://tummypolice.iyangi.com/api/v1'
paths:
  /restaurants:
    get:
      tags:
        - Restaurant
      summary: get restaurants available in a particular city eg. "Bangalore"
      operationId: restaurantsGET
      parameters:
        - name: city
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: returns a list of restaurants
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    address:
                      type: string
                    city:
                      type: string
                    image:
                      type: string
        '405':
          description: invalid input
  /restaurant/info:
    get:
      tags:
        - Restaurant
      summary: get restaurant info based on id
      operationId: restaurantIGET
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: returns a list of restaurants
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  address:
                    type: string
                  city:
                    type: string
                  image:
                    type: string
        '405':
          description: invalid input
  /menu:
    get:
      tags:
        - Menu
      summary: get the menu for a specific restaurant
      operationId: menuGET
      parameters:
        - name: restaurantid
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: returns a list of menu items
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    vegetarian:
                      type: boolean
                    category:
                      description: 'category of the menu item eg. bowl, sandwich, breakfast etc,.'
                      type: string
                    image:
                      type: string
                    ingredients:
                      description: ingredients
                      type: string
        '405':
          description: invalid input
  /cart:
    get:
      tags:
        - Cart
      summary: retrieve the current cart state
      operationId: cartGET
      responses:
        '200':
          description: returns the current cart state
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
        - Cart
      summary: store cart state in the server
      operationId: cartPOST
      parameters:
        - name: cart
          in: path
          required: true
          content:
            application/json:
              schema:
                type: object
      responses:
        '200':
          description: successfully updated cart
  /checkout:
    get:
      tags:
        - Checkout
      summary: retrieve the current cart state with bill and delivery fee details
      operationId: checkoutGET
      responses:
        '200':
          description: returns the current cart state with bill
          content:
            application/json:
              schema:
                type: object
  /order:
    post:
      tags:
        - Order
      summary: place order
      operationId: orderPOST
      parameters:
        - name: orderdetails
          in: path
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: returns object with delivery partner tracking info
  /register:
    post:
      tags:
        - User Management
      summary: register user
      operationId: registerPOST
      parameters:
        - name: userdetails
          in: path
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful registration
  /login:
    post:
      tags:
        - User Management
      summary: login user
      operationId: loginPOST
      parameters:
        - name: logindetails
          in: path
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: successful login
  /place/autocomplete/json:
    get:
      tags:
        - Places
      summary: gives places predictions as the user types
      operationId: placesGET
      parameters: 
        - name: input
          in: query
          required: true
          schema:
            type: string
        - name: key
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: returns an array of objects
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
components:
  schemas:
    Menu:
      type: object
      properties:
        restaurantId:
          type: string
    User:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
        phone:
          type: string
    Login:
      type: object
      properties:
        phone:
          type: string
    Order:
      type: object
